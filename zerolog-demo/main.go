package main

import (
	"fmt"
	"os"
	"time"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
)

var (
	logLevel   string
	logFormat  string
	prettify   bool
)

// rootCmd –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
var rootCmd = &cobra.Command{
	Use:   "zerolog-demo",
	Short: "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è zerolog —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
	Long: `–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ zerolog —Å —É—Ä–æ–≤–Ω—è–º–∏:
‚Ä¢ trace - —Å–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ info  - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ warn  - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ error - –æ—à–∏–±–∫–∏`,
	Example: `  # –ó–∞–ø—É—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  zerolog-demo --log-level=trace
  zerolog-demo --log-level=debug
  zerolog-demo --log-level=info
  zerolog-demo --log-level=warn
  zerolog-demo --log-level=error

  # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞
  zerolog-demo --log-format=json
  zerolog-demo --log-format=console
  zerolog-demo --prettify`,
	RunE: runDemo,
}

func init() {
	// –§–ª–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	rootCmd.Flags().StringVar(&logLevel, "log-level", "info", "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (trace, debug, info, warn, error)")
	rootCmd.Flags().StringVar(&logFormat, "log-format", "console", "–§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ (json, console)")
	rootCmd.Flags().BoolVar(&prettify, "prettify", false, "–ö—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏")
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞: %v\n", err)
		os.Exit(1)
	}
}

func runDemo(cmd *cobra.Command, args []string) error {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ zerolog
	setupLogging()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	demonstrateLogLevels()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	demonstrateStructuredLogging()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	demonstrateContextualLogging()

	return nil
}

// setupLogging –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç zerolog
func setupLogging() {
	// –ü–∞—Ä—Å–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	level, err := zerolog.ParseLevel(logLevel)
	if err != nil {
		fmt.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è '%s', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'info'\n", logLevel)
		level = zerolog.InfoLevel
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
	zerolog.SetGlobalLevel(level)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
	if logFormat == "console" || prettify {
		// –ö—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
		output := zerolog.ConsoleWriter{
			Out:        os.Stdout,
			TimeFormat: "15:04:05",
		}

		if prettify {
			// –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
			output.FormatLevel = func(i interface{}) string {
				level := fmt.Sprintf("%s", i)
				switch level {
				case "trace":
					return fmt.Sprintf("\033[90m%-5s\033[0m", "TRACE") // –°–µ—Ä—ã–π
				case "debug":
					return fmt.Sprintf("\033[36m%-5s\033[0m", "DEBUG") // –¶–∏–∞–Ω
				case "info":
					return fmt.Sprintf("\033[32m%-5s\033[0m", "INFO")  // –ó–µ–ª–µ–Ω—ã–π
				case "warn":
					return fmt.Sprintf("\033[33m%-5s\033[0m", "WARN")  // –ñ–µ–ª—Ç—ã–π
				case "error":
					return fmt.Sprintf("\033[31m%-5s\033[0m", "ERROR") // –ö—Ä–∞—Å–Ω—ã–π
				default:
					return fmt.Sprintf("%-5s", level)
				}
			}
		}

		log.Logger = zerolog.New(output).With().Timestamp().Logger()
	} else {
		// JSON —Ñ–æ—Ä–º–∞—Ç
		log.Logger = zerolog.New(os.Stdout).With().Timestamp().Logger()
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
	log.Logger = log.With().
		Str("app", "zerolog-demo").
		Str("version", "1.0.0").
		Logger()
}

// demonstrateLogLevels –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func demonstrateLogLevels() {
	fmt.Println("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
	fmt.Printf("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: %s\n\n", logLevel)

	// Trace - —Å–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
	log.Trace().
		Str("function", "demonstrateLogLevels").
		Msg("–≠—Ç–æ TRACE —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

	// Debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	log.Debug().
		Int("step", 1).
		Str("action", "demonstration").
		Msg("–≠—Ç–æ DEBUG —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

	// Info - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
	log.Info().
		Str("status", "running").
		Msg("–≠—Ç–æ INFO —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

	// Warn - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
	log.Warn().
		Str("issue", "deprecated_function").
		Msg("–≠—Ç–æ WARN —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ")

	// Error - –æ—à–∏–±–∫–∏
	log.Error().
		Str("error_type", "demo_error").
		Msg("–≠—Ç–æ ERROR —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ")
}

// demonstrateStructuredLogging –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
func demonstrateStructuredLogging() {
	fmt.Println("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
	log.Info().
		Str("user_id", "user123").
		Int("age", 25).
		Float64("balance", 1234.56).
		Bool("is_premium", true).
		Time("login_time", time.Now()).
		Dur("session_duration", 45*time.Minute).
		Strs("roles", []string{"user", "admin"}).
		Msg("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
	log.Info().
		Str("method", "GET").
		Str("path", "/api/users").
		Int("status_code", 200).
		Dur("response_time", 150*time.Millisecond).
		Int("response_size", 1024).
		Str("user_agent", "Mozilla/5.0").
		Msg("HTTP –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	log.Error().
		Err(fmt.Errorf("connection timeout")).
		Str("service", "database").
		Str("host", "db.example.com").
		Int("port", 5432).
		Int("retry_count", 3).
		Msg("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
}

// demonstrateContextualLogging –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
func demonstrateContextualLogging() {
	fmt.Println("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	contextLogger := log.With().
		Str("request_id", "req-12345").
		Str("user_id", "user456").
		Logger()

	contextLogger.Info().Msg("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

	// –§—É–Ω–∫—Ü–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	processOrder(contextLogger)

	contextLogger.Info().Msg("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	demonstrateSubComponents()
}

// processOrder —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
func processOrder(logger zerolog.Logger) {
	orderLogger := logger.With().
		Str("component", "order_processor").
		Str("order_id", "order-789").
		Logger()

	orderLogger.Debug().Msg("–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞")

	orderLogger.Info().
		Float64("amount", 99.99).
		Str("currency", "USD").
		Msg("–ó–∞–∫–∞–∑ –≤–∞–ª–∏–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")

	// –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	time.Sleep(100 * time.Millisecond)

	orderLogger.Warn().
		Int("inventory_level", 5).
		Msg("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤")

	orderLogger.Info().
		Str("status", "completed").
		Msg("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
}

// demonstrateSubComponents –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
func demonstrateSubComponents() {
	// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
	dbLogger := log.With().
		Str("component", "database").
		Str("table", "users").
		Logger()

	dbLogger.Debug().
		Str("query", "SELECT * FROM users WHERE id = ?").
		Interface("params", []interface{}{123}).
		Msg("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞")

	dbLogger.Info().
		Int("rows_affected", 1).
		Dur("query_time", 25*time.Millisecond).
		Msg("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

	// –ö–µ—à
	cacheLogger := log.With().
		Str("component", "cache").
		Str("key", "user:123").
		Logger()

	cacheLogger.Debug().Msg("–ü–æ–∏—Å–∫ –≤ –∫–µ—à–µ")
	cacheLogger.Info().
		Bool("hit", false).
		Msg("–ü—Ä–æ–º–∞—Ö –∫–µ—à–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î")

	// –í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
	apiLogger := log.With().
		Str("component", "external_api").
		Str("service", "payment_gateway").
		Logger()

	apiLogger.Info().
		Str("endpoint", "https://api.payments.com/charge").
		Str("method", "POST").
		Msg("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API")

	apiLogger.Error().
		Int("status_code", 503).
		Str("error", "Service Unavailable").
		Msg("–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
}
