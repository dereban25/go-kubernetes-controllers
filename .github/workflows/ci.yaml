name: k8s-cli CI/CD

# ──────────────────────────────
# События
# ──────────────────────────────
on:
  push:
    branches: [ main, develop ]
    tags:    [ 'v*' ]      # релизы начинаются с «v»
  pull_request:
    branches: [ main ]

# ──────────────────────────────
# Глобальные переменные и права
# ──────────────────────────────
env:
  GO_VERSION:  '1.21'
  BINARY_NAME: 'k8s-cli'

permissions:
  contents: read            # минимальные права по-умолчанию

# ──────────────────────────────
# Jobs
# ──────────────────────────────
jobs:

  # ────────────────────────────
  # 1. Lint / Code Quality
  # ────────────────────────────
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run: go fmt ./..."
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

  # ────────────────────────────
  # 2. Unit + Integration tests
  #    (KinD-кластер)
  # ────────────────────────────
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      # 🚀 Поднимаем локальный Kubernetes-кластер
      - name: Set up KinD cluster
        uses: helm/kind-action@v1
        with:
          version: v0.23.0
          cluster_name: ci
          wait: 120s            # ждём готовности API-сервера

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      # (опционально) кэш модулей Go
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      # Собираем бинарь, чтобы интеграционные тесты могли им пользоваться
      - name: Build CLI binary
        run: |
          mkdir -p bin
          go build -o bin/${{ env.BINARY_NAME }} main.go

      # Генерируем минимальные unit-тесты (как было раньше)
      - name: Create basic tests
        run: |
          mkdir -p tests
          cat > tests/basic_test.go <<'EOF'
          package tests
          import ("os/exec"; "testing")
          func TestHelp(t *testing.T) {
              cmd := exec.Command("../bin/k8s-cli", "--help")
              if err := cmd.Run(); err != nil {
                  t.Fatalf("help failed: %v", err)
              }
          }
          EOF

      # Запускаем все unit + integration тесты
      - name: Run Go tests
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}   # экспорт из kind-action
        run: go test ./tests/... -v

  # ────────────────────────────
  # 3. Кросс-платформенная сборка
  # ────────────────────────────
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: |
          mkdir -p bin
          ext=$([ "${{ matrix.os }}" = 'windows-latest' ] && echo '.exe' || echo '')
          go build -o bin/${{ env.BINARY_NAME }}${ext} main.go

      - name: Smoke test
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x bin/${{ env.BINARY_NAME }}
          ./bin/${{ env.BINARY_NAME }} --help

      - name: Smoke test (Windows)
        if: matrix.os == 'windows-latest'
        run: .\bin\${{ env.BINARY_NAME }}.exe --help

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}
          path: k8s-cli/bin/${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  # ────────────────────────────
  # 4. Release (пуш тега v*)
  # ────────────────────────────
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    # 🔑 даём токену право записывать contents (fix 403)
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build release binaries
        run: |
          mkdir -p release
          VERSION="${{ steps.version.outputs.VERSION }}"
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              [ "$os" = "windows" ] && ext='.exe' || ext=''
              [ "$os" = "windows" -a "$arch" = "arm64" ] && continue
              GOOS=$os GOARCH=$arch go build \
                -ldflags "-s -w -X main.version=$VERSION" \
                -o release/${{ env.BINARY_NAME }}-${os}-${arch}${ext} \
                main.go
            done
          done
          (cd release && sha256sum * > checksums.txt)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: k8s-cli/release/*
          body: |
            ## k8s-cli ${{ steps.version.outputs.VERSION }}
            Binaries for Linux, macOS, Windows (amd64/arm64) + checksums.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ────────────────────────────
  # 5. Итоговый отчёт
  # ────────────────────────────
  status:
    name: Build Status
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, test, build]
    steps:
      - name: Report results
        run: |
          echo "## CI/CD Results"
          echo "- Code Quality: ${{ needs.lint.result }}"
          echo "- Tests:        ${{ needs.test.result }}"
          echo "- Build:        ${{ needs.build.result }}"
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi
