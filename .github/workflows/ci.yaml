name: k8s-cli CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  BINARY_NAME: 'k8s-cli'

jobs:
  # Code Quality Check
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run: go fmt ./..."
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

  # Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create basic tests
        run: |
          mkdir -p tests
          cat > tests/basic_test.go << 'EOF'
          package tests
          
          import (
              "os/exec"
              "testing"
          )
          
          func TestBuild(t *testing.T) {
              cmd := exec.Command("go", "build", "-o", "../bin/k8s-cli", "../main.go")
              if err := cmd.Run(); err != nil {
                  t.Fatalf("Build failed: %v", err)
              }
          }
          
          func TestHelp(t *testing.T) {
              // Build first
              exec.Command("mkdir", "-p", "../bin").Run()
              exec.Command("go", "build", "-o", "../bin/k8s-cli", "../main.go").Run()
          
              // Test help
              cmd := exec.Command("../bin/k8s-cli", "--help")
              if err := cmd.Run(); err != nil {
                  t.Logf("Help command not available: %v", err)
              }
          }
          EOF

      - name: Run tests
        run: |
          mkdir -p bin
          go test ./tests/... -v

  # Build for different platforms
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: |
          mkdir -p bin
          go build -o bin/${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} main.go

      - name: Test build (Linux/Mac)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x bin/${{ env.BINARY_NAME }}
          ./bin/${{ env.BINARY_NAME }} --help || echo "Help not available"

      - name: Test build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\bin\${{ env.BINARY_NAME }}.exe --help || echo "Help not available"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}
          path: k8s-cli/bin/${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  # Release build (only for tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build for all platforms
        run: |
          mkdir -p release
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o release/${{ env.BINARY_NAME }}-linux-amd64 main.go
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${VERSION}" -o release/${{ env.BINARY_NAME }}-linux-arm64 main.go
          
          # macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o release/${{ env.BINARY_NAME }}-darwin-amd64 main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${VERSION}" -o release/${{ env.BINARY_NAME }}-darwin-arm64 main.go
          
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o release/${{ env.BINARY_NAME }}-windows-amd64.exe main.go
          
          # Create checksums
          cd release
          sha256sum * > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: k8s-cli/release/*
          body: |
            ## k8s-cli ${{ steps.version.outputs.VERSION }}
            
            ### Installation
            
            **Linux/macOS:**
            ```bash
            # Download the appropriate file and move to PATH
            chmod +x k8s-cli-*
            sudo mv k8s-cli-* /usr/local/bin/k8s-cli
            ```
            
            **Windows:**
            ```cmd
            # Download k8s-cli-windows-amd64.exe
            # Rename to k8s-cli.exe and add to PATH
            ```
            
            ### Verification
            ```bash
            k8s-cli --help
            k8s-cli --version
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build status report
  status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    steps:
      - name: Report results
        run: |
          echo "## CI/CD Results"
          echo "- Code Quality: ${{ needs.lint.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All checks passed successfully!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi