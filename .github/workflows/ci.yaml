name: k8s-cli CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:    [ 'v*' ]
  pull_request:
    branches: [ main ]

# ──────────────────────────────
# Глобальные переменные и права
# ──────────────────────────────
env:
  GO_VERSION:  '1.21'
  BINARY_NAME: 'k8s-cli'

permissions:
  contents: read

# ──────────────────────────────
# Jobs
# ──────────────────────────────
jobs:

  # ────────────────────────────
  # 1. Lint / Code Quality
  # ────────────────────────────
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run: go fmt ./..."
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

  # ────────────────────────────
  # 2. Unit + Integration tests
  #    (KinD-кластер)
  # ────────────────────────────
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      # 🚀 Running local Kubernetes-cluster
      - name: Set up KinD cluster
        id: kind
        uses: helm/kind-action@v1
        with:
          version: v0.23.0
          cluster_name: ci
          wait: 120s

      - name: Export KUBECONFIG
        run: echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build CLI binary
        run: |
          mkdir -p bin
          go build -o bin/${{ env.BINARY_NAME }} main.go

      - name: Run Go tests
        shell: bash
        env:
          KUBECONFIG: ${{ steps.kind.outputs.kubeconfig }}
        run: |
          echo "Using KUBECONFIG at: $KUBECONFIG"
          echo "Using KUBECONFIG at: env.KUBECONFIG"
          kubectl cluster-info
          go test ./tests/... -v

  # ────────────────────────────
  # 3. Cross-platform build
  # ────────────────────────────
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: |
          mkdir -p bin
          go build -o bin/${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} main.go

      - name: Test build (Linux/Mac)
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x bin/${{ env.BINARY_NAME }}
          ./bin/${{ env.BINARY_NAME }} --help || echo "Help not available"

      - name: Test build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\bin\${{ env.BINARY_NAME }}.exe --help || echo "Help not available"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}
          path: k8s-cli/bin/${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  # ────────────────────────────
  # 4. Release
  # ────────────────────────────
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./k8s-cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build release binaries
        run: |
          mkdir -p release
          VERSION="${{ steps.version.outputs.VERSION }}"
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              [ "$os" = "windows" ] && ext='.exe' || ext=''
              [ "$os" = "windows" -a "$arch" = "arm64" ] && continue
              GOOS=$os GOARCH=$arch go build \
                -ldflags "-s -w -X main.version=$VERSION" \
                -o release/${{ env.BINARY_NAME }}-${os}-${arch}${ext} \
                main.go
            done
          done
          (cd release && sha256sum * > checksums.txt)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: k8s-cli/release/*
          body: |
            ## k8s-cli ${{ steps.version.outputs.VERSION }}
            Binaries for Linux, macOS, Windows (amd64/arm64) + checksums.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  status:
    name: Build Status
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, test, build]
    steps:
      - name: Report results
        run: |
          echo "## CI/CD Results"
          echo "- Code Quality: ${{ needs.lint.result }}"
          echo "- Tests:        ${{ needs.test.result }}"
          echo "- Build:        ${{ needs.build.result }}"
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi
  detailed-status:
    name: 📊 Detailed Status Report
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    steps:
      - name: Generate Detailed Status
        run: |
          echo "# 📊 k8s-cli CI/CD Detailed Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Pipeline Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.lint.result == 'success' && '✅ Success' || '❌ Failed' }} | ~1min | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Success' || '❌ Failed' }} | ~1min | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build (All Platforms) | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} | ~3min | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All pipeline stages completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "✅ Multi-platform binaries are ready" >> $GITHUB_STEP_SUMMARY
            echo "✅ Artifacts uploaded and available for download" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "- Download artifacts from this run" >> $GITHUB_STEP_SUMMARY
            echo "- Create a release tag: \`git tag v1.0.0 && git push origin v1.0.0\`" >> $GITHUB_STEP_SUMMARY
            echo "- Test binaries on target platforms" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ One or more pipeline stages failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Failed Jobs:" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.lint.result }}" != "success" ]] && echo "- ❌ Code Quality: Check formatting and go vet errors" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.test.result }}" != "success" ]] && echo "- ❌ Tests: Review test failures and fix issues" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.build.result }}" != "success" ]] && echo "- ❌ Build: Check compilation errors across platforms" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔄 To Fix:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the failed job logs above" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix the issues in your code" >> $GITHUB_STEP_SUMMARY
            echo "3. Test locally: \`make check\`" >> $GITHUB_STEP_SUMMARY
            echo "4. Push fixes to trigger new build" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = {
              lint: '${{ needs.lint.result }}',
              test: '${{ needs.test.result }}',
              build: '${{ needs.build.result }}'
            };
            
            const statusEmoji = {
              success: '✅',
              failure: '❌',
              cancelled: '⏹️',
              skipped: '⏭️'
            };
            
            const body = `## 🚀 CI/CD Pipeline Results
            
            | Job | Status | Result |
            |-----|--------|--------|
            | Code Quality | ${statusEmoji[status.lint] || '❓'} | ${status.lint} |
            | Tests | ${statusEmoji[status.test] || '❓'} | ${status.test} |
            | Build | ${statusEmoji[status.build] || '❓'} | ${status.build} |
            
            ${Object.values(status).every(s => s === 'success') 
              ? '🎉 **All checks passed!** Ready to merge.' 
              : '❌ **Some checks failed.** Please review and fix issues.'}
            
            [View full pipeline →](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });